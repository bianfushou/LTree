#version 330 core
struct Material {
    sampler2D texture_diffuse1;
    sampler2D texture_specular1;
    float shininess;
};

struct Light {
    vec3 light_dir
    
    float constant;
    float linear;
    float quadratic;
    
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


in vec3 Normal;
in vec3 Position;
in vec2 TexCoords;

uniform vec3 camera_pos;
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform Material material;
uniform Light light;

out vec4 color;

vec3 colorResult(Material mat,vec3 normal,vec3 viewDir,Light light);

void main()
{
    // Diffuse
    vec3 result;
    vec3 norm = normalize(Normal);
    material.texture_diffuse1 = texture_diffuse1;
    material.texture_specular1 = texture_specular1;
    vec3 viewDir = normalize(camera_pos - Position);
    result = colorResult(material,norm,viewDir,light);
    color = vec4(result,1.0f);
}

vec3 colorResult(Material mat,vec3 normal,vec3 viewDir,Light light)
{
    // Diffuse shading
    float diff = max(dot(normal, -light.light_dir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(light.light_dir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0),mat.shininess);
    // Combine results
    vec3 ambient = light.ambient * vec3(texture(mat.texture_diffuse1, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(mat.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(mat.texture_specular1, TexCoords));

    return (ambient + diffuse + specular);
}
